WHITESPACE= _{" "| "\t" | "\r"| "\n"}
COMMENT = _{ "#" ~ (!"\n" ~ ANY)* }

//verbs
verbs = { "<>"| "|>"| ">"| "<" | "+" | "-" | 
        "--" | "++" | "/"| "?" | "|" | "&&" | "||"}

reserver_words= {
    (
    "end" | "defmodule" | "do"| 
    "when" | "and" | "or" | "not" | "in" | "fn"|
    "catch"| "rescue" | "after" | "else" | "def"
    )
}
//variable identifier
assignment = {(ident|atom|tuple|head_tail) ~ "=" ~ (types|ident)}
var_name= @{(ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_" | "?")*)}
module_name= @{(ASCII_ALPHA_UPPER ~ (ASCII_ALPHANUMERIC | "_" | ".")*)}

ident = @{ !(reserver_words ~ !ASCII_ALPHANUMERIC) ~ var_name}
head_tail = {"[" ~ (ident | types) ~ verbs ~ (array | types | ident | head_tail) ~ "]" }

// //primitive type
number = @{
    "-"?
    ~ ("0"| ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
    ~ ("." ~ ASCII_DIGIT*)?
    ~ (^"e" ~ ("+"|"-")? ~ ASCII_DIGIT+)?
}
string = @{"\"" ~ inner ~ "\""}
inner = @{char*}
char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\"| "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4,})
}

single_quote_string= @{"'" ~ single_inner ~ "'"}
single_inner = @{single_quote_char*}
single_quote_char = {
    |!("\'"| "\\") ~ ANY
    | "\\" ~ ("'" | "\\"| "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4,})
}

boolean = {"true"| "false"}
atom = @{":" ~ var_name }
null = {"nil"}
tuple= {
    "{"~"}"| "{" ~ (types | ident) ~ ("," ~ (types|ident))* ~ ","? ~ "}"
}

//map types
arrow_map_item = {
    (ident|types)~ "=>" ~ (ident|types)
}
colon_map_item= {
    (ident|"{}"|"%{}") ~ ":" ~ (ident|types)
}
colon_first_map = {
    "%{"~"}"|"%{" ~ (ident ~ verbs)? ~ (colon_map_item) ~ 
    ("," ~ (colon_map_item))* ~
    ","? ~ "}"
}

//in an arrow first map, the colon map should appear last
map_arrangment= {
    arrow_map_item
    | arrow_map_item ~ colon_map_item
}
arrow_first_map = {
    "%{"~"}"|"%{" ~ (ident ~ verbs)? ~ (arrow_map_item) ~ 
    ("," ~ map_arrangment)* ~
    ("," ~ colon_map_item)* ~
    ","? ~ "}"
}

array_op = { "[" ~ 
    (types | ident | array_op) ~ 
    verbs ~ 
    (types | ident | array_op) ~ 
    "]" 
}

//array types
array= {
    "["~"]" | "[" ~ (types | ident ) ~ ("," ~ (types|ident))* ~ ","? ~"]"
}

//definitions

module= {"defmodule" ~ module_name ~ "do" ~ stat ~ "end"}


// //valid elixir expressions
types = { number 
    | string 
    | boolean 
    | atom 
    | array 
    | single_quote_string
    | null
    | tuple
    | arrow_first_map
    | colon_first_map
    | array_op
    
  }
expr = {module| assignment }
stat = { (expr|types| ident )* }
program= _{ SOI ~ stat ~ EOI}